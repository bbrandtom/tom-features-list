//! > bool_xor libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(mut a: bool, b: bool) -> bool {
    // TODO(orizi): When inlining is supported move to calling `bool_xor` directly.
    let (r,) = bool_xor_impl(a, b);
    r
}

//! > casm
[fp + -4] = [ap + 0] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * [ap + -1], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 2})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_xor_impl = bool_xor_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;

bool_xor_impl([0], [1]) -> ([2]);
store_temp<core::bool>([2]) -> ([2]);
rename<core::bool>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_and libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: bool, b: bool) -> bool {
    // TODO(orizi): When inlining is supported move to calling `bool_and` directly.
    let (r,) = bool_and_impl(a, b);
    r
}

//! > casm
[ap + 0] = [fp + -4] * [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 1})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_and_impl = bool_and_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;

bool_and_impl([0], [1]) -> ([2]);
store_temp<core::bool>([2]) -> ([2]);
rename<core::bool>([2]) -> ([3]);
return([3]);

test::foo@0([0]: core::bool, [1]: core::bool) -> (core::bool);

//! > ==========================================================================

//! > bool_not libfunc

//! > test_comments

//! > test_function_name
run_small_e2e_test

//! > cairo
fn foo(a: bool) -> bool {
    // TODO(orizi): When inlining is supported move to calling `bool_not` directly.
    let (r,) = bool_not_impl(a);
    r
}

//! > casm
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 2})

//! > sierra_code
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;

libfunc bool_not_impl = bool_not_impl;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;

bool_not_impl([0]) -> ([1]);
store_temp<core::bool>([1]) -> ([1]);
rename<core::bool>([1]) -> ([2]);
return([2]);

test::foo@0([0]: core::bool) -> (core::bool);
